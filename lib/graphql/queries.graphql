# Write your query or mutation here
fragment UserFields on User {
  id
  name
  phone
  email
  isSignedUp
}

fragment UserPaysFields on User {
  ...UserFields
  upiIds
  owes {
    groupId
    amount
  }
}

fragment GroupBasic on Group {
  id
  name
}

fragment GroupFields on Group {
  ...GroupBasic
  creator {
    ...UserFields
  }
  members {
    owedInGroup
    member {
      ...UserFields
    }
  }
  owed
  createdAt
}
fragment ExpenseBasic on Expense {
  id
  title
  createdAt
  amount
  creatorId
}

fragment ExpenseFields on Expense {
  ...ExpenseBasic
  creator {
    ...UserFields
  }
  splits {
    ...SplitFields
  }
}

fragment NewExpenseFields on Expense {
  ...ExpenseBasic
  splits{
    ...SplitTransactionFields
  }
}

fragment SplitFieldsBasics on Split {
  id
  amount
  transactionType
  createdAt
  transactionPartGroupId
  fromUserId
  toUserId
  creatorId
  withGroupId
  groupId
}

fragment SplitFields on Split {
  ...SplitFieldsBasics
  fromUser {
    ...UserFields
  }
  toUser {
    ...UserFields
  }
}

fragment SplitTransactionFields on Split {
  ...SplitFields
  expense {
    ...ExpenseBasic
  }
  group {
    ...GroupBasic
  }
  creator {
    ...UserFields
  }
}

fragment GroupWithExpenses on Group {
  ...GroupFields
  expenses(fromTime: $fromTime, limit: $limit) {
    ...ExpenseFields
  }
}

fragment ExpenseMixSplitFields on ExpenseMixSplit{
  expense{
    ...ExpenseBasic
  }
  split{
    ...SplitFields
  }
}

query user {
  user {
    __typename
    ... on Registered {
      user {
        ...UserFields
      }
    }
    ... on Unregistered {
      phone
    }
  }
}

query groups {
  groups {
    ...GroupFields
  }
}

query interacted_users {
  interactedUsers {
    ...UserPaysFields
  }
}

query group($fromTime: String, $limit: Int!, $groupId: String!) {
  group(id: $groupId) {
    ...GroupWithExpenses
  }
}

mutation signup($name: String!, $upi_id: String) {
  signup(name: $name, upiId: $upi_id) {
    user {
      ...UserFields
    }
    tokens {
      accessToken
      refreshToken
    }
  }
}

mutation create_group($name: String!) {
  createGroup(name: $name) {
    ...GroupFields
  }
}

mutation add_to_group($email: String!, $groupId: String!) {
  addToGroupByEmail(email: $email, groupId: $groupId)
}

mutation add_expense(
  $title: String!
  $amount: Int!
  $splits: [SplitInput!]!
  $groupId: String!
) {
  addExpense(
    title: $title
    amount: $amount
    splits: $splits
    groupId: $groupId
  ) {
    ...NewExpenseFields
  }
}

mutation send_email_otp($email: String!) {
  sendEmailOtp(email: $email)
}

mutation verify_email_otp($email: String!, $otp: String!) {
  verifyOtp(email: $email, otp: $otp) {
    __typename
    ... on UserSignedUp {
      accessToken
      refreshToken
    }
    ... on UserNotSignedUp {
      signupToken
    }
  }
}

mutation refresh_token($refresh_token: String!) {
  refreshToken(refreshToken: $refresh_token) {
    accessToken
    refreshToken
  }
}

query searchUserByEmail($email: String!) {
  findUserByEmail(email: $email) {
    ...UserFields
  }
}

mutation createNonGroupExpense(
  $title: String!
  $amount: Int!
  $nonGroupSplit: [SplitInputNonGroup!]!
) {
  addNonGroupExpense(title: $title, amount: $amount, splits: $nonGroupSplit) {
    group {
      ...GroupFields
    }
    expense {
      ...NewExpenseFields
    }
  }
}

mutation settleInGroup($withUser: String!, $groupId: String!, $amount: Int!) {
  settleInGroup(toUser: $withUser, groupId: $groupId, amount: $amount) {
    ...SplitTransactionFields
  }
}

mutation simplifyUser($withUser: String!) {
  simplifyCrossGroup(withUser: $withUser) {
    ...SplitTransactionFields
  }
}

mutation autoSettleWithUser($withUser: String!, $amount: Int!) {
  autoSettleWithUser(withUser: $withUser, amount: $amount) {
    ...SplitTransactionFields
  }
}

query transactionWithUser($withUser: String!, $fromTime: String, $limit: Int!) {
  getTransactionsWithUser(
    withUser: $withUser
    fromTime: $fromTime
    limit: $limit
  ) {
    ...SplitTransactionFields
  }
}

query transactionMixExpense($groupId: String!, $fromTime: String, $limit: Int!){
  getTransactionsMixExpenseWithGroup(withGroup: $groupId, fromTime: $fromTime, limit: $limit){
    ...ExpenseMixSplitFields
  }
}