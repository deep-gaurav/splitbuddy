fragment UploadFields on ImageUploadData {
  id
  presignedUrl
}

fragment UserFields on User {
  id
  name
  phone
  email
  isSignedUp
}

fragment AmountFields on Amount {
  amount
  currencyId
}

fragment CurrencyFields on Currency {
  id
  rate
  symbol
  displayName
  decimals
}

fragment UserPaysFields on User {
  ...UserFields
  upiIds
  owes {
    groupId
    amount {
      ...AmountFields
    }
  }
}

fragment GroupBasic on Group {
  id
  name
}

fragment GroupFields on Group {
  ...GroupBasic
  creator {
    ...UserFields
  }
  members {
    owedInGroup {
      ...AmountFields
    }
    member {
      ...UserFields
    }
  }
  createdAt
}
fragment ExpenseBasic on Expense {
  id
  title
  createdAt
  category
  amount {
    ...AmountFields
  }
  creatorId
  note
  imageId
}

fragment ExpenseFields on Expense {
  ...ExpenseBasic
  creator {
    ...UserFields
  }
  splits {
    ...SplitFields
  }
}

fragment NewExpenseFields on Expense {
  ...ExpenseBasic
  splits {
    ...SplitTransactionFields
  }
}

fragment ConfigFields on UserConfig {
  defaultCurrencyId
}

fragment SplitFieldsBasics on Split {
  id
  amount {
    ...AmountFields
  }
  transactionType
  createdAt
  transactionPartGroupId
  fromUserId
  toUserId
  creatorId
  withGroupId
  groupId
  note
  imageId
}

fragment SplitFields on Split {
  ...SplitFieldsBasics
  fromUser {
    ...UserFields
  }
  toUser {
    ...UserFields
  }
}

fragment SplitTransactionFields on Split {
  ...SplitFields
  expense {
    ...ExpenseBasic
  }
  group {
    ...GroupBasic
  }
  creator {
    ...UserFields
  }
}

fragment SplitWithSiblings on Split {
  ...SplitTransactionFields
  siblings{
    ...SplitTransactionFields
  }
}

fragment GroupWithExpenses on Group {
  ...GroupFields
  expenses(fromTime: $fromTime, limit: $limit) {
    ...ExpenseFields
  }
}

fragment ExpenseMixSplitFields on ExpenseMixSplit {
  expense {
    ...ExpenseBasic
  }
  split {
    ...SplitFields
  }
}

fragment CategorisedAmountFields on CategorisedAmount{
  category
  amount{
    ...AmountFields
  }
}

query user {
  user {
    __typename
    ... on Registered {
      user {
        ...UserFields
      }
    }
    ... on Unregistered {
      phone
    }
  }
}

query userConfig {
  config {
    ...ConfigFields
  }
}

query groups {
  groups {
    ...GroupFields
  }
}

query interacted_users {
  interactedUsers {
    ...UserPaysFields
  }
}

query refresh {
  user {
    __typename
    ... on Registered {
      user {
        ...UserFields
      }
    }
    ... on Unregistered {
      phone
    }
  }
  config {
    ...ConfigFields
  }
  groups {
    ...GroupFields
  }
  interactedUsers {
    ...UserPaysFields
  }
  currencies {
    ...CurrencyFields
  }
}

query currencies {
  currencies {
    ...CurrencyFields
  }
}

query group($fromTime: String, $limit: Int!, $groupId: String!) {
  group(id: $groupId) {
    ...GroupWithExpenses
  }
}

mutation signup($name: String!, $upi_id: String) {
  signup(name: $name, upiId: $upi_id) {
    user {
      ...UserFields
    }
    tokens {
      accessToken
      refreshToken
    }
  }
}

mutation create_group($name: String!) {
  createGroup(name: $name) {
    ...GroupFields
  }
}

mutation add_to_group($email: String!, $groupId: String!) {
  addToGroupByEmail(email: $email, groupId: $groupId)
}

mutation add_expense(
  $title: String!
  $amount: Int!
  $splits: [SplitInput!]!
  $groupId: String!
  $currencyId: String!
  $category: String!
  $imageId: String
  $note: String
) {
  addExpense(
    title: $title
    amount: $amount
    splits: $splits
    groupId: $groupId
    currencyId: $currencyId
    category: $category
    note: $note
    imageId: $imageId
  ) {
    ...NewExpenseFields
  }
}

mutation send_email_otp($email: String!) {
  sendEmailOtp(email: $email)
}

mutation verify_email_otp($email: String!, $otp: String!) {
  verifyOtp(email: $email, otp: $otp) {
    __typename
    ... on UserSignedUp {
      accessToken
      refreshToken
    }
    ... on UserNotSignedUp {
      signupToken
    }
  }
}

mutation refresh_token($refresh_token: String!) {
  refreshToken(refreshToken: $refresh_token) {
    accessToken
    refreshToken
  }
}

query searchUserByEmail($email: String!) {
  findUserByEmail(email: $email) {
    ...UserFields
  }
}

mutation createNonGroupExpense(
  $title: String!
  $amount: Int!
  $nonGroupSplit: [SplitInputNonGroup!]!
  $currencyId: String!
  $category: String!
  $imageId: String
  $note: String
) {
  addNonGroupExpense(
    title: $title
    amount: $amount
    splits: $nonGroupSplit
    currencyId: $currencyId
    category: $category
    note: $note
    imageId: $imageId
  ) {
    group {
      ...GroupFields
    }
    expense {
      ...NewExpenseFields
    }
  }
}

mutation settleInGroup(
  $withUser: String!
  $groupId: String!
  $amount: Int!
  $currencyId: String!
    $imageId: String,
  $note: String
) {
  settleInGroup(
    toUser: $withUser
    groupId: $groupId
    amount: $amount
    currencyId: $currencyId
        imageId:$imageId,
    note:$note
  ) {
    ...SplitTransactionFields
  }
}

mutation simplifyUser($withUser: String!) {
  simplifyCrossGroup(withUser: $withUser) {
    ...SplitTransactionFields
  }
}

mutation autoSettleWithUser(
  $withUser: String!
  $amount: Int!
  $currencyId: String!
  $imageId: String,
  $note: String
) {
  autoSettleWithUser(
    withUser: $withUser
    amount: $amount
    currencyId: $currencyId,
    imageId:$imageId,
    note:$note
  ) {
    ...SplitTransactionFields
  }
}

query transactionWithUser($withUser: String!, $skip: Int, $limit: Int!) {
  getTransactionsMixExpenseWithUser(
    withUser: $withUser
    skip:$skip
    limit: $limit
  ) {
    ...ExpenseMixSplitFields
  }
}

query transactionMixExpense(
  $groupId: String!
  $skip: Int
  $limit: Int!
) {
  getTransactionsMixExpenseWithGroup(
    withGroup: $groupId
    skip:$skip
    limit: $limit
  ) {
    ...ExpenseMixSplitFields
  }
}

mutation setDefaultCurrency($currencyId: String!) {
  setDefaultCurrency(currencyId: $currencyId) {
    ...ConfigFields
  }
}

mutation currencyConvert(
  $withUser: String!
  $groupId: String!
  $fromCurrencyId: String!
  $toCurrencyId: String!
) {
  convertCurrency(
    withUser: $withUser
    groupId: $groupId
    fromCurrencyId: $fromCurrencyId
    toCurrencyId: $toCurrencyId
  ) {
    ...SplitTransactionFields
  }
}

mutation changeName($name: String!) {
  changeName(name: $name) {
    ...UserFields
  }
}

query getTransactions($skip: Int, $limit: Int!) {
  getTransactions(limit: $limit, skip:$skip) {
    ...ExpenseMixSplitFields
  }
}

mutation setNotificationToken($token: String!) {
  setNotificationToken(token: $token)
}

mutation getImageUploadUrl($size: Int!) {
  uploadImage(size: $size) {
    ...UploadFields
  }
}

query getImageViewUrl($imageId: String!){
  imageUrl(id:$imageId)
}

query getExpense($expenseId: String!){
  expenseById(id:$expenseId){
    ...ExpenseFields
  }
}

query splitFromid($splitId: String!){
  splitById(id:$splitId){
    ...SplitWithSiblings
  }
}

query splitFromGroup($partId: String!){
  splitsByPart(partId:$partId){
    ...SplitFields
  }
}

query expenseSummaryCategorised($groupId: String, $fromTime: String!){
  expenseSummaryByCategory(groupId:$groupId, fromTime:$fromTime){
    ...CategorisedAmountFields
  }
}