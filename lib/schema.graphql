union AuthResult = UserNotSignedUp | UserSignedUp

type Expense {
  id: String!
  title: String!
  createdAt: String!
  creator: User!
  group: Group!
  amount: Int!
  splits: [Split!]!
  toPay: Int!
  toReceive: Int!
}

type Group {
  id: String!
  name: String!
  createdAt: String!
  creator: User!
  members: [User!]!
  expenses(skip: Int! = 0, limit: Int! = 10): [Expense!]!
  toPay: Int!
  toReceive: Int!
}

type Mutation {
  sendEmailOtp(email: String!): Boolean!
  verifyOtp(email: String!, otp: String!): AuthResult!
  refreshToken(refreshToken: String!): UserSignedUp!
  signup(name: String!, upiId: String): SignupSuccess!
  createGroup(name: String!): Group!
  addToGroupByEmail(groupId: String!, email: String!): String!
  addExpense(
    groupId: String!
    title: String!
    amount: Int!
    splits: [SplitInput!]!
  ): Expense!
  settleExpense(expenseId: String!, amount: Int!): Expense!
  settleUser(userId: String!, amount: Int!): String!
}

type Query {
  ping: String!
  user: UserAuth!
  group(id: String!): Group!
  userById(id: String!): User!
  expensesCreatedByUser(
    userId: String!
    skip: Int! = 0
    limit: Int! = 10
  ): [Expense!]!
  interactedUsers: [User!]!
  groups: [Group!]!
}

type Registered {
  user: User!
}

type SignupSuccess {
  user: User!
  tokens: UserSignedUp!
}

type Split {
  id: String!
  expense: Expense!
  amount: Int!
  amountSettled: Int!
  fromUser: User!
  toUser: User!
  isSettled: Boolean!
}

input SplitInput {
  amount: Int!
  userId: String!
}

type Unregistered {
  phone: String
  email: String
}

type User {
  id: String!
  name: String!
  phone: String
  email: String
  toPay: Int!
  upiIds: [String!]!
  toReceive: Int!
}

union UserAuth = Unregistered | Registered

type UserNotSignedUp {
  signupToken: String!
}

type UserSignedUp {
  accessToken: String!
  refreshToken: String!
}
