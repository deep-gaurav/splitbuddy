type Amount {
  amount: Int!
  currencyId: String!
}

union AuthResult = UserNotSignedUp | UserSignedUp

type Currency {
  id: String!
  displayName: String!
  rate: Float!
  symbol: String!
  decimals: Int!
}

type Expense {
  id: String!
  title: String!
  createdAt: String!
  creator: User!
  creatorId: String!
  group: Group!
  amount: Amount!
  splits: [Split!]!
}

type ExpenseMixSplit {
  expense: Expense
  split: Split
}

type Group {
  id: String!
  name: String
  createdAt: String!
  creator: User!
  members: [GroupMember!]!
  expenses(fromTime: String, limit: Int! = 10): [Expense!]!
}

type GroupMember {
  member: User!
  owedInGroup: [Amount!]!
}

type Mutation {
  sendEmailOtp(email: String!): Boolean!
  verifyOtp(email: String!, otp: String!): AuthResult!
  refreshToken(refreshToken: String!): UserSignedUp!
  signup(name: String!, upiId: String): SignupSuccess!
  createGroup(name: String!): Group!
  setNotificationToken(token: String!): String!
  addToGroupByEmail(groupId: String!, email: String!): String!
  addNonGroupExpense(
    title: String!
    amount: Int!
    currencyId: String!
    splits: [SplitInputNonGroup!]!
  ): NonGroupExpense!
  addExpense(
    groupId: String!
    title: String!
    amount: Int!
    currencyId: String!
    splits: [SplitInput!]!
  ): Expense!
  settleInGroup(
    toUser: String!
    groupId: String!
    amount: Int!
    currencyId: String!
  ): Split!
  simplifyCrossGroup(withUser: String!): [Split!]!
  autoSettleWithUser(
    withUser: String!
    amount: Int!
    currencyId: String!
  ): [Split!]!
  setDefaultCurrency(currencyId: String!): UserConfig!
  changeName(name: String!): User!
  convertCurrency(
    withUser: String!
    groupId: String!
    fromCurrencyId: String!
    toCurrencyId: String!
  ): [Split!]!
}

type NonGroupExpense {
  group: Group!
  expense: Expense!
}

type OwedInGroup {
  groupId: String!
  amount: Amount!
}

type Query {
  ping: String!
  user: UserAuth!
  group(id: String!): Group!
  userById(id: String!): User!
  interactedUsers: [User!]!
  groups: [Group!]!
  findUserByEmail(email: String!): User!
  overallOwed: [Amount!]!
  getTransactionsWithUser(
    withUser: String!
    fromTime: String
    limit: Int!
  ): [Split!]!
  currencies: [Currency!]!
  getTransactionsWithGroup(
    withGroup: String!
    fromTime: String
    limit: Int!
  ): [Split!]!
  getTransactions(fromTime: String, limit: Int!): [ExpenseMixSplit!]!
  getTransactionsMixExpenseWithGroup(
    withGroup: String!
    fromTime: String
    limit: Int!
  ): [ExpenseMixSplit!]!
  config: UserConfig!
}

type Registered {
  user: User!
}

type SignupSuccess {
  user: User!
  tokens: UserSignedUp!
}

type Split {
  id: String!
  expense: Expense
  expenseId: String
  group: Group!
  groupId: String!
  amount: Amount!
  fromUser: User!
  toUser: User!
  transactionType: TransactionType!
  createdAt: String!
  creator: User!
  creatorId: String!
  toUserId: String!
  fromUserId: String!
  transactionPartGroupId: String
  withGroup: Group
  withGroupId: String
}

input SplitInput {
  amount: Int!
  userId: String!
}

input SplitInputNonGroup {
  amount: Int!
  email: String
  userId: String
}

enum TransactionType {
  EXPENSE_SPLIT
  CROSS_GROUP_SETTLEMENT
  CURRENCY_CONVERSION
  CASH_PAID
}

type Unregistered {
  phone: String
  email: String
}

type User {
  id: String!
  name: String
  phone: String
  email: String
  isSignedUp: Boolean!
  owes: [OwedInGroup!]!
  upiIds: [String!]!
}

union UserAuth = Unregistered | Registered

type UserConfig {
  userId: String!
  defaultCurrencyId: String!
}

type UserNotSignedUp {
  signupToken: String!
}

type UserSignedUp {
  accessToken: String!
  refreshToken: String!
}
